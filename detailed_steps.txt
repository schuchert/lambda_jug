Playing With Lambdas

1. Create project
- This is a simple project, so creating by hand
	- Make directories
	- Add a pom
	- Confirm it builds
	- Open in IntelliJ

used 55
updated to 4.11 of junit

Installed VI pulgin
Installed Gherkin plugin
-----------------------------------
1. make directory
2. git init 
3. directories
mkdir -p src/main/java/
mkdir -p src/main/resources/
mkdir -p src/test/java/
mkdir -p src/test/resources/

4. the pom (with jars for future stuff)
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.shoe</groupId>
    <artifactId>rpn_calculator</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>rpn_calculator</name>
    <url>http://maven.apache.org</url>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.reflections</groupId>
            <artifactId>reflections-maven</artifactId>
            <version>0.9.9-RC2</version>
        </dependency>

        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-picocontainer</artifactId>
            <version>1.1.8</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-junit</artifactId>
            <version>1.1.8</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.11</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>info.cukes</groupId>
            <artifactId>cucumber-pro</artifactId>
            <version>1.0.10</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>2.4</version>
                <configuration>
                    <archive>
                        <index>true</index>
                        <manifest>
                            <classpathPrefix>lib/</classpathPrefix>
                            <addClasspath>true</addClasspath>
                            <mainClass>com.shoe.calculator.App</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.2</version>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <overWriteReleases>true</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>
</project>

5. mvn test

6. Add some failing features: in src/test/resources/com/shoe/calculator/Iteration1.feature
Feature: Basic Math

  Scenario: Addition
    Given a user enters 30, 4
    When the user executes plus
    Then the result should be 34

  Scenario: Subtraction
    Given a user enters 30, 4
    When the user executes minus
    Then the result should be 26

  Scenario: Multiplication
    Given a user enters 4, 6
    When the user executes times
    Then the result should be 24

  Scenario: Division
    Given a user enters 8, 2
    When the user executes divide
    Then the result should be 4

  Scenario: Factorial
    Given a user enters 5
    When the user executes factorial
    Then the result should be 120

  Scenario: Subtraction with only one number entered
    Given a user enters 1
    When the user executes minus
    Then the result should be -1

  Scenario: Addition with only no number Entered
    Given a newly created calculator
    When the user executes plus
    Then the result should be 0

  Scenario: Dropping a value
    Given a user enters 42, 13
    When the user executes drop
    Then the result should be 42

  Scenario: Swapping
    Given a user enters 42, 13
    When the user executes swap
    Then the result should be 42
    And the next result should be 13

  Scenario: Executing bogus request
    When the user executes some_unknown_operator
    Then the error should include "Unknown Operator"

7. Create a basic runner: src/test/java/com/shoe/calculator/RunCucumberTest.java
package com.shoe.calculator;

import cucumber.api.CucumberOptions;
import cucumber.api.junit.Cucumber;
import org.junit.runner.RunWith;

@RunWith(Cucumber.class)
@CucumberOptions(monochrome = true, format = {"pretty", "html:target/cucumber", "rerun:target/rerun.txt"})
public class RunCucumberTest {
}

8. Create step definitions: src/test/java/com/shoe/calculator/CalculatorSteps.java
package com.shoe.calculator;

import cucumber.api.PendingException;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

import java.util.Arrays;

public class CalculatorSteps {
    @Given("^a user enters ([- ,\\d]+)$")
    public void a_user_enters(String numbers) throws Throwable {
        Arrays.stream(numbers.split(", ")).map(String::trim).mapToInt(Integer::valueOf).forEach(v->{});
        throw new PendingException();
    }

    @When("^the user executes (.*)$")
    public void the_user_executes(String operatorName) throws Throwable {
        throw new PendingException();
    }

    @Then("^the result should be ([-\\d]+)$")
    public void the_result_should_be(int expected) throws Throwable {
        throw new PendingException();
    }

    @Given("^a newly created calculator$")
    public void a_newly_created_calculator() throws Throwable {
        throw new PendingException();
    }

    @Then("^the next result should be ([-\\d]+)$")
    public void the_next_result_should_be(int expected) throws Throwable {
        // drop a value
        the_result_should_be(expected);
    }

    @Then("^the error should include \"(.*?)\"$")
    public void the_error_should_include(String message) throws Throwable {
        throw new PendingException();
    }
}



